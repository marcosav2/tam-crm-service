openapi: 3.1.0
info:
  title: Basic CRM API
  description: Basic CRM API that provides customer and user management
  version: 1.0.0

tags:
  - name: customer
    description: Customer related operations
  - name: user
    description: User related operations

paths:
  /v1/customers:
    get:
      tags:
        - customer
      summary: Provides a paged list of all available customers
      operationId: listCustomers
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            example: 2
        - name: size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 50
            example: 10
      responses:
        200:
          description: Success response providing customers
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - results
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomerOverview'
                  results:
                    type: integer
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - customer
      summary: Creates a new customer
      operationId: createCustomer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - surname
              properties:
                name:
                  type: string
                surname:
                  type: string
                profileImage:
                  type: string
                  format: binary
            encoding:
              profileImage:
                contentType: image/png, image/jpeg
      responses:
        201:
          description: Successfully created customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOverview'#/components/responses/CreatedCustomerResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        413:
          $ref: '#/components/responses/TooBig'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        500:
          $ref: '#/components/responses/ServerError'

  /v1/customers/{id}:
    get:
      tags:
        - customer
      summary: Provides details for a specific customer
      operationId: getCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Customer details response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - customer
      summary: Updates an existing customer
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - surname
              properties:
                name:
                  type: string
                surname:
                  type: string
                profileImage:
                  type: string
                  format: binary
            encoding:
              profileImage:
                contentType: image/png, image/jpeg
      responses:
        200:
          description: Successfully updated customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOverview'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        413:
          $ref: '#/components/responses/TooBig'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - customer
      summary: Deletes a specific customer
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successfully deleted customer
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /v1/customers/{id}/profile-image:
    delete:
      tags:
        - customer
      summary: Deletes the profile image of a specific customer
      operationId: deleteCustomerProfileImage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successfully deleted customer profile image
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /v1/users:
    get:
      tags:
        - user
      summary: Provides a paged list of all available users
      operationId: listUsers
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            example: 2
        - name: size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: Success response providing users
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - results
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  results:
                    type: integer
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - user
      summary: Creates a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - name
                - surname
                - role
              properties:
                username:
                  type: string
                name:
                  type: string
                surname:
                  type: string
                role:
                  $ref: '#/components/schemas/UserRole'
      responses:
        201:
          description: Successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        413:
          $ref: '#/components/responses/TooBig'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        500:
          $ref: '#/components/responses/ServerError'

  /v1/users/{id}:
    get:
      tags:
        - user
      summary: Provides details for a specific user
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User details response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - user
      summary: Updates an existing user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - name
                - surname
                - role
              properties:
                username:
                  type: string
                name:
                  type: string
                surname:
                  type: string
                role:
                  $ref: '#/components/schemas/UserRole'
      responses:
        200:
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        413:
          $ref: '#/components/responses/TooBig'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - user
      summary: Deletes a specific user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successfully deleted user
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

components:
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Forbidden access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    TooBig:
      description: Request entity too large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnsupportedMediaType:
      description: Unsupported media type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    CustomerOverview:
      type: object
      required:
        - id
        - name
        - surname
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        profilePhotoUrl:
          type: string

    Customer:
      type: object
      required:
        - id
        - name
        - surname
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        profilePhotoUrl:
          type: string
        createdAt:
          type: string
          format: date-time
          example: "2024-06-14T00:05:00"
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
          example: "2024-07-14T00:05:00"
        updatedBy:
          type: string

    User:
      type: object
      required:
        - id
        - username
        - name
        - surname
        - role
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'

    UserRole:
      type: string
      enum:
        - ADMIN
        - USER

    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string